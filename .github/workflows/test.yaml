name: Test

on:
  workflow_dispatch:

defaults:
  run:
    shell: pwsh

permissions:
  contents: read
  actions: write
  id-token: write

jobs:
  update:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh

    steps:
      - name: ENV
        run: |
          Get-ChildItem env: | Out-Host

      - name: Get ID-Token
        run: |
          function Parse-JWTtoken([string]$token) {
            if ($token.Contains(".") -and $token.StartsWith("eyJ")) {
              $tokenHeader = $token.Split(".")[0].Replace('-', '+').Replace('_', '/')
              while ($tokenHeader.Length % 4) { $tokenHeader += "=" }
              Write-Host ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($tokenHeader)) | ConvertFrom-Json)
              $tokenPayload = $token.Split(".")[1].Replace('-', '+').Replace('_', '/')
              while ($tokenPayload.Length % 4) { $tokenPayload += "=" }
              return [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($tokenPayload)) | ConvertFrom-Json
            }
            throw "Invalid token"
          }
          Write-Host "Query federated token"
          Write-Host "$ENV:ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange"
          $result = Invoke-RestMethod -Method GET -UseBasicParsing -Headers @{ "Authorization" = "bearer $ENV:ACTIONS_ID_TOKEN_REQUEST_TOKEN"; "Accept" = "application/vnd.github+json" } -Uri "$ENV:ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange"
          Parse-JWTToken($result.value) | Out-Host

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
  
      - name: Use the token
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          Write-Host "$ENV:GH_TOKEN".Length

      - name: Manual get token
        env:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
        run: |
          $client_id = "$env:app-id"
          $header = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes((ConvertTo-Json -InputObject @{
            alg = "RS256"
            typ = "JWT"
          }))).TrimEnd('=').Replace('+', '-').Replace('/', '_');
          $payload = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes((ConvertTo-Json -InputObject @{
            iat = [System.DateTimeOffset]::UtcNow.AddSeconds(-10).ToUnixTimeSeconds()
            exp = [System.DateTimeOffset]::UtcNow.AddMinutes(10).ToUnixTimeSeconds()
            iss = $client_id
          }))).TrimEnd('=').Replace('+', '-').Replace('/', '_');
          $rsa = [System.Security.Cryptography.RSA]::Create()
          $rsa.ImportFromPem("$env:private-key".Trim())
          $signature = [Convert]::ToBase64String($rsa.SignData([System.Text.Encoding]::UTF8.GetBytes("$header.$payload"), [System.Security.Cryptography.HashAlgorithmName]::SHA256, [System.Security.Cryptography.RSASignaturePadding]::Pkcs1)).TrimEnd('=').Replace('+', '-').Replace('/', '_')
          $jwt = "$header.$payload.$signature"
          Write-Host $jwt